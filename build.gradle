/*************************************************************************************************************************************************************************************
COMMANDE		|	DEPENDS ON FOLLOWING COMMANDS										|	DESCRIPTION										
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
gulp_compile	|	installGulp, bowerInstall							 				| 	(DEV) Peuple le dossier "public" en executant la tache "gulp compile"
gulp_build		|	installGulp, bowerInstall							 				| 	(PROD) Peuple le dossier "public" en executant la tache "gulp build"
gulp_watch		|	installGulp, bowerInstall							 				| 	(DEV) Peuple le dossier "public" en executant la tache adéquate au type de fichier modifié de façon automatique
gulp_*			|	installGulp, bowerInstall							 				| 	Start the "*" Gulp task in gulpfile (ex: 'html', 'jshint', etc)
				|																		|
installGulp		|	npmInstall															|	Install Gulp
bowerInstall	|	npmInstall															| 	Install toutes les dépendances du fichier "bower.json"
npmInstall		|																		| 	Install toutes les dépendances du fichier "package.json"
				|																		|
playBinary 		|	All compile tasks for source sets added to the Play application. 	| 	Performs a build of just the Play application.
dist 			|	createPlayBinaryZipDist, createPlayBinaryTarDist 					| 	Assembles the Play distribution.
stage 			|	stagePlayBinaryDist 												| 	Stages the Play distribution.
				|																		|
runPlayBinary 	|	playBinary to build Play application. 								| 	Runs the Play application for local development. See how this works with continuous build.
	(Pour recompiler la partie java sur modification d'un fichier *.java (développement continue), ajouter '-t' OU '--continuous' soit 'gradlew runPlayBinary -t')
	(Pour debug, ajouter '-Pdebug' avec la commande runPlayBinary soit 'gradlew runPlayBinary -Pdebug')
testPlayBinary 	|	playBinary to build Play application and compilePlayBinaryTests. 	| 	Runs JUnit/TestNG tests for the Play application.
*************************************************************************************************************************************************************************************/

plugins {
	id "com.moowork.node" version "0.12"
	id "com.moowork.gulp" version "0.12"
}
apply plugin: 'java-base'
apply plugin: 'play'
apply plugin: 'eclipse'

// Add play dependencies to Eclipse project
eclipse.classpath.plusConfigurations += [ configurations.play ]
eclipse.classpath.plusConfigurations += [ configurations.playTest ]
	
// Add app folder to Eclipse classpath	
sourceSets {
	main {
		java {
			srcDir 'app'
		}
	}
	test {
		java {
			srcDir 'test'
		}        
	}	    
}

model {
    components {
        play {
            platform play: '2.4.6', scala: '2.11'
        }
    }
}

repositories {
    jcenter()
	mavenCentral()
    maven {
        name "typesafe-maven-release"
        url "https://repo.typesafe.com/typesafe/maven-releases"
    }
    ivy {
        name "typesafe-ivy-release"
        url "https://repo.typesafe.com/typesafe/ivy-releases"
        layout "ivy"
    }
}

dependencies {
    play (
		[group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'],
		[group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.7.4'],
		[group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.7.4'],
		[group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.7.4'],
		[group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jdk8', version: '2.7.4'],
		[group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr353', version: '2.7.4'],
		[group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-json-org', version: '2.7.4'],
		[group: 'org.postgresql', name: 'postgresql', version: '9.4.1208'],
		[group: 'org.hibernate', name: 'hibernate-core', version: '5.1.0.Final'],
		[group: 'org.hibernate', name: 'hibernate-java8', version: '5.1.0.Final'],
		[group: 'org.hibernate', name: 'hibernate-entitymanager', version: '5.1.0.Final'],
		[group: 'org.hibernate', name: 'hibernate-hikaricp', version: '5.1.0.Final'],
		[group: 'org.mindrot', name: 'jbcrypt', version: '0.3m']
	)
}

node {
	// Version of node to use.
	version = '4.4.2'

	// Version of npm to use.
	npmVersion = '3.3.12'

	// Base URL for fetching node distributions (change if you have a mirror).
	distBaseUrl = 'https://nodejs.org/dist'

	// If true, it will download node using above parameters.
	// If false, it will try to use globally installed node.
	download = true

	// Set the work directory for unpacking node
	workDir = file("${project.buildDir}/client")

	// Set the work directory where node_modules should be located
	nodeModulesDir = file("${project.projectDir}/client")
}

gulp {
    // Set the directory where gulpfile.js should be found
    workDir = file("${project.projectDir}/client")

    // Whether colors should output on the terminal
    colors = true

    // Whether output from Gulp should be buffered - useful when running tasks in parallel
    bufferOutput = false
}

task bowerInstall(dependsOn: npmInstall, type: NodeTask) {
    script = file("client/node_modules/bower/bin/bower")
    args = ['--config.cwd=client',
			'--config.storage.cache=client/caches/bower/cache',
            '--config.storage.packages=client/caches/bower/packages',
            '--config.storage.registry=client/caches/bower/registry',
            'install']
    inputs.file "client/bower.json"
    outputs.dir "client/bower_components"
}

task bowerUpdate(dependsOn: npmInstall, type: NodeTask) {
    script = file("client/node_modules/bower/bin/bower")
    args = ['--config.cwd=client',
			'--config.storage.cache=client/caches/bower/cache',
            '--config.storage.packages=client/caches/bower/packages',
            '--config.storage.registry=client/caches/bower/registry',
            'update']
    inputs.file "client/bower.json"
    outputs.dir "client/bower_components"
}

installGulp.dependsOn(':npmInstall')

gulp_build.dependsOn(':installGulp')
gulp_build.dependsOn(':bowerInstall')
gulp_buildClean.dependsOn(':installGulp')
gulp_buildClean.dependsOn(':bowerInstall')
gulp_compile.dependsOn(':installGulp')
gulp_compile.dependsOn(':bowerInstall')

ext.configFile = project.hasProperty('configFile') ? project.getProperty('configFile') : './conf/application.conf'
ext.httpPlayPort = project.hasProperty('httpPort') ? project.getProperty('httpPort') : 9000
tasks.withType(PlayRun) {

    println '[build.gradle] Using configFile: ' + configFile
    println '[build.gradle] Using httpPort: ' + httpPlayPort
    
    if (project.hasProperty('debug')){
        forkOptions.jvmArgs = ['-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=9999', '-Dconfig.file='+configFile, '-Dfile.encoding=utf-8']
    } else{
        forkOptions.jvmArgs = ['-Dconfig.file='+configFile, '-Dfile.encoding=utf-8']
    }
    
    if (project.hasProperty('httpPort')){
        httpPort = Integer.parseInt(httpPlayPort)
    }
}

tasks.withType(Task) {

	//Set UTF-8 encoding when compiling Java source
	if (it.hasProperty('options') && it.options.hasProperty('encoding')){
		logger.debug "Set options.encoding UTF-8 to task " + it.name
		options.encoding = 'UTF-8'
	}
	
	if (it.name == 'stage') {
		createPlayBinaryAssetsJar.dependsOn(':bowerInstall')
		createPlayBinaryAssetsJar.dependsOn(':installGulp')
		createPlayBinaryAssetsJar.dependsOn(':gulp_build')
	}
    if (it.name == 'dist'){
		createPlayBinaryAssetsJar.dependsOn(':bowerInstall')
		createPlayBinaryAssetsJar.dependsOn(':installGulp')
		createPlayBinaryAssetsJar.dependsOn(':gulp_compile')
    }
	/*if (it.name == 'runPlayBinary'){
		createPlayBinaryAssetsJar.dependsOn(':bowerInstall')
		createPlayBinaryAssetsJar.dependsOn(':installGulp')
		createPlayBinaryAssetsJar.dependsOn(':gulp_compile')
    }*/
}